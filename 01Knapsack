import java.util.Scanner;

public class Knapsack {

    // Method to compute the maximum profit for 0/1 Knapsack problem
    public static int knapsack(int capacity, int items, int[] prices, int[] weights) {
        // Create a DP table to store the maximum profit for each subproblem
        int[][] dp = new int[items + 1][capacity + 1];

        // Fill the DP table
        for (int i = 1; i <= items; i++) {
            for (int w = 0; w <= capacity; w++) {
                if (weights[i - 1] <= w) {
                    // If the current item's weight is less than or equal to the remaining capacity
                    dp[i][w] = Math.max(dp[i - 1][w], prices[i - 1] + dp[i - 1][w - weights[i - 1]]);
                } else {
                    // Else, we cannot include the current item
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }

        // Return the maximum profit that can be earned
        return dp[items][capacity];
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Take the knapsack capacity and number of items as input
        System.out.print("Enter the capacity of the knapsack: ");
        int capacity = scanner.nextInt();
        System.out.print("Enter the number of items: ");
        int items = scanner.nextInt();

        // Arrays to store prices and weights of the items
        int[] prices = new int[items];
        int[] weights = new int[items];

        // Input the value and weight for each item
        for (int i = 0; i < items; i++) {
            System.out.print("Enter value and weight for item " + (i + 1) + ": ");
            prices[i] = scanner.nextInt();
            weights[i] = scanner.nextInt();
        }

        // Call the knapsack function and output the result
        int maxProfit = knapsack(capacity, items, prices, weights);
        System.out.println("Maximum Profit Earned: " + maxProfit);
        
        scanner.close();
    }
}

/*
0/1 Knapsack:
Time Complexity: O(N*W), where N is the number of items and W is the knapsack capacity.
Auxiliary Space: O(N*W), for the 2-D DP array of size N*W.
*/
