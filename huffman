import java.util.PriorityQueue;

public class HuffmanCoding {
    
    // A class representing a node in the Min-Heap
    static class MinHeapNode {
        char data; // Character stored in the node
        int freq;  // Frequency of the character
        MinHeapNode left, right; // Left and right child nodes
        
        // Constructor to initialize the node with character and frequency
        MinHeapNode(char data, int freq) {
            this.data = data;
            this.freq = freq;
            this.left = this.right = null;
        }
    }
    
    // A comparator to compare two MinHeapNode objects based on their frequencies
    static class Compare implements java.util.Comparator<MinHeapNode> {
        @Override
        public int compare(MinHeapNode a, MinHeapNode b) {
            return a.freq - b.freq; // Min-Heap, so return frequency difference
        }
    }
    
    // Function to print the Huffman Codes by traversing the Huffman tree
    static void printCodes(MinHeapNode root, String str) {
        if (root == null) {
            return;
        }
        // If it's a leaf node (contains a character)
        if (root.data != '$') {
            System.out.println(root.data + ": " + str);
        }
        // Traverse left and right subtree
        printCodes(root.left, str + "0");
        printCodes(root.right, str + "1");
    }
    
    // Function to build the Huffman Tree and generate the Huffman codes
    static void HuffmanCode(char[] data, int[] freq, int size) {
        // Min-Heap to store the nodes based on frequency
        PriorityQueue<MinHeapNode> minHeap = new PriorityQueue<>(size, new Compare());
        
        // Create a node for each character and insert it into the Min-Heap
        for (int i = 0; i < size; i++) {
            minHeap.add(new MinHeapNode(data[i], freq[i]));
        }
        
        // Build the Huffman tree
        while (minHeap.size() > 1) {
            // Extract two nodes with the least frequency
            MinHeapNode left = minHeap.poll();
            MinHeapNode right = minHeap.poll();
            
            // Create a new internal node with frequency equal to the sum of the two nodes
            MinHeapNode temp = new MinHeapNode('$', left.freq + right.freq);
            temp.left = left;
            temp.right = right;
            
            // Insert the internal node back into the heap
            minHeap.add(temp);
        }
        
        // The root node of the Huffman Tree is now the only node left in the heap
        printCodes(minHeap.peek(), "");
    }
    
    public static void main(String[] args) {
        char[] data = {'A', 'B', 'C', 'D'};
        int[] freq = {23, 12, 34, 10};
        
        int size = data.length;
        HuffmanCode(data, freq, size);
    }
}

/*
Explanation:

- MinHeapNode: Represents a node in the Huffman tree. Each node contains a character, its frequency, and pointers to its left and right child nodes.
- Compare: A comparator used for ordering the nodes in the Min-Heap based on frequency. The comparator ensures that the node with the lowest frequency is given the highest priority.
- printCodes: This function recursively traverses the Huffman tree, printing the Huffman code (binary string) for each character.
- HuffmanCode: Builds the Huffman tree by repeatedly extracting the two nodes with the lowest frequency, combining them into a new internal node, and reinserting the new node into the Min-Heap.
- The main function sets up the data and frequency arrays, then calls the `HuffmanCode` function to generate and print the Huffman codes.

Time Complexity: O(n log n), where n is the number of unique characters. The heap operations (insert and remove) take O(log n) time, and we perform these operations n-1 times.

Auxiliary Space: O(n), as we store n nodes in the heap during the process.
*/
